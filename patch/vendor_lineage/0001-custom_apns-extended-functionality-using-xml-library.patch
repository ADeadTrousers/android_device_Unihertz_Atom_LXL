From a8559ea96f85af73fac6dfd88b5b72694119ed93 Mon Sep 17 00:00:00 2001
From: Matthias Leitl <a.dead.trousers@gmail.com>
Date: Wed, 11 May 2022 22:37:23 +0200
Subject: [PATCH 1/1] custom_apns: extended functionality (using xml library,
 combine multiple files)

1) Some vendors provide xml files in a "one attribute per line" kind of a format.
The current logic cannot handle that and therefore this alternate approach was created.

The only real donwside currently is that there is no way to preserve the comment lines from the original file.
Sadly the current python environment supplied with android/lineage doesn't feature lxml yet (see the commented lines in this patch).

2) To keep any vendor provided xml file unchanged and still be able to add more apn settings this patch will also introduce the handling of multiple files.
Example:
CUSTOM_APNS_FILE := device/sample/etc/apns-full-conf.xml \
    $(DEVICE_COMMON_PATH)/etc/apns-conf.xml \
    $(DEVICE_COMMON_PATH)/etc/apns-conf-additional.xml

First the entries of apns-full-conf.xml get applied.
If there is the same entry (comparing carrier, mcc and mnc) in one of the later files it will get picked instead.
Next the remaining entries of apns-conf.xml get applied.
Again if the entry exists in a later file this one will get picked instead.
And so on.

Change-Id: I3c15e62414be0b94cc260f2cb3003f7056ccbbef
---
 tools/custom_apns.py | 89 ++++++++++++++++++++++++++------------------
 1 file changed, 53 insertions(+), 36 deletions(-)

diff --git a/tools/custom_apns.py b/tools/custom_apns.py
index 0de116ee..bff8ba44 100644
--- a/tools/custom_apns.py
+++ b/tools/custom_apns.py
@@ -16,47 +16,64 @@
 #
 
 import sys
-from xml.dom.minidom import parseString
+import xml.etree.ElementTree as etree
+# Using lxml to preserve comments
+# import lxml.etree as etree
+
+def queryAttribute(element, attribute):
+    if attribute in element.attrib:
+        return '[@'+attribute+'="'+element.attrib[attribute]+'"]'
+    else:
+        return ""
 
 def main(argv):
-    reload(sys)
-    sys.setdefaultencoding('utf8')
-    original_file = 'vendor/lineage/prebuilt/common/etc/apns-conf.xml'
+    original_file = "vendor/lineage/prebuilt/common/etc/apns-conf.xml"
+    apn_trees = []
 
-    if len(argv) == 3:
+    if len(argv) >= 3:
         output_file_path = argv[1]
-        custom_override_file = argv[2]
+        apn_trees.append(etree.parse(original_file))
+        i = 2
+        while i < len(argv):
+            apn_trees.append(etree.parse(argv[i]))
+            i += 1
     else:
         raise ValueError("Wrong number of arguments %s" % len(argv))
 
-    custom_apn_names = []
-    with open(custom_override_file, 'r') as f:
-        for line in f:
-            xmltree = parseString(line)
-            carrier = xmltree.getElementsByTagName('apn')[0].getAttribute('carrier')
-            custom_apn_names.append('"' + carrier + '"')
-
-    with open(original_file, 'r') as input_file:
-        with open(output_file_path, 'w') as output_file:
-            for line in input_file:
-                writeOriginalLine = True
-                for apn in custom_apn_names:
-                    if apn in line:
-                        with open(custom_override_file, 'r') as custom_file:
-                            for override_line in custom_file:
-                                if apn in override_line:
-                                    output_file.write(override_line)
-                                    writeOriginalLine = False
-                                    custom_apn_names.remove(apn)
-                if writeOriginalLine:
-                    if "</apns>" in line:
-                        if custom_apn_names:
-                            for apn in custom_apn_names:
-                                with open(custom_override_file, 'r') as custom_file:
-                                    for override_line in custom_file:
-                                        if apn in override_line:
-                                            output_file.write(override_line)
-                    output_file.write(line)
-
-if __name__ == '__main__':
+    apn_queries = []
+
+    output_root = etree.Element("apns")
+    output_root.set("version",apn_trees[0].getroot().attrib["version"])
+    output_root.text = "\n  "
+
+# Needs lxml lib to work
+#    for comment_data in apn_trees[0].xpath("preceding-sibling::comment()"):
+#      output_root.addprevious(comment_data)
+
+    while apn_trees:
+        current_tree = apn_trees.pop(0)
+        for apn_current in current_tree.findall("apn"):
+            apn_query = "apn"
+            apn_query += queryAttribute(apn_current,"carrier")
+            apn_query += queryAttribute(apn_current,"mcc")
+            apn_query += queryAttribute(apn_current,"mnc")
+            if apn_query not in apn_queries:
+                for overwrite_tree in apn_trees:
+                    apn_overwrite = overwrite_tree.findall(apn_query)
+                    if apn_overwrite:
+                        apn_output = apn_overwrite[0]
+                        break
+                if not apn_overwrite:
+                    apn_output = apn_current
+                apn_output.tail = "\n  "
+                output_root.append(apn_output)
+                apn_queries.append(apn_query)
+
+    if apn_output is not None:
+        apn_output.tail = "\n"
+
+    output_tree = etree.ElementTree(output_root)
+    output_tree.write(output_file_path,encoding="UTF-8",xml_declaration=True)
+
+if __name__ == "__main__":
     main(sys.argv)
-- 
2.25.1

