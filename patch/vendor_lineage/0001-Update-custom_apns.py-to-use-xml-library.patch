From 79b1cde18f867f638bf709ea690ea38fbc9795bd Mon Sep 17 00:00:00 2001
From: Matthias Leitl <a.dead.trousers@gmail.com>
Date: Sun, 3 Apr 2022 20:07:36 +0200
Subject: [PATCH 1/1] Update custom_apns.py to use xml library

Change-Id: I05e8e070d48b48caaeaba76d814eb9cbedbbaf79
---
 tools/custom_apns.py | 90 ++++++++++++++++++++++++++------------------
 1 file changed, 54 insertions(+), 36 deletions(-)

diff --git a/tools/custom_apns.py b/tools/custom_apns.py
index b58ece1b..6c935ca7 100644
--- a/tools/custom_apns.py
+++ b/tools/custom_apns.py
@@ -16,47 +16,65 @@
 #
 
 import sys
-from xml.dom.minidom import parseString
+import xml.etree.ElementTree as etree
+# Using lxml to preserve comments    
+# import lxml.etree as etree
+
+def queryAttribute(element, attribute):
+    if attribute in element.attrib:
+        return '[@'+attribute+'="'+element.attrib[attribute]+'"]'
+    else:
+        return ""
 
 def main(argv):
-    reload(sys)
-    sys.setdefaultencoding('utf8')
-    original_file = 'vendor/lineage/prebuilt/common/etc/apns-conf.xml'
+    original_file = "vendor/lineage/prebuilt/common/etc/apns-conf.xml"
+    apn_trees = []
 
-    if len(argv) == 3:
+    if len(argv) >= 3:
         output_file_path = argv[1]
-        custom_override_file = argv[2]
+        apn_trees.append(etree.parse(original_file))
+        i = 2
+        while i < len(argv):
+            apn_trees.append(etree.parse(argv[i]))
+            i += 1
     else:
         raise ValueError("Wrong number of arguments %s" % len(argv))
 
-    custom_apn_names = []
-    with open(custom_override_file, 'r') as f:
-        for line in f:
-            xmltree = parseString(line)
-            carrier = xmltree.getElementsByTagName('apn')[0].getAttribute('carrier')
-            custom_apn_names.append(carrier)
-
-    with open(original_file, 'r') as input_file:
-        with open(output_file_path, 'w') as output_file:
-            for line in input_file:
-                writeOriginalLine = True
-                for apn in custom_apn_names:
-                    if apn in line:
-                        with open(custom_override_file, 'r') as custom_file:
-                            for override_line in custom_file:
-                                if apn in override_line:
-                                    output_file.write(override_line)
-                                    writeOriginalLine = False
-                                    custom_apn_names.remove(apn)
-                if writeOriginalLine:
-                    if "</apns>" in line:
-                        if custom_apn_names:
-                            for apn in custom_apn_names:
-                                with open(custom_override_file, 'r') as custom_file:
-                                    for override_line in custom_file:
-                                        if apn in override_line:
-                                            output_file.write(override_line)
-                    output_file.write(line)
-
-if __name__ == '__main__':
+    apn_queries = []
+
+    output_root = etree.Element("apns")
+    output_root.set("version",apn_trees[0].getroot().attrib["version"])
+    output_root.text = "\n  "
+
+# Needs lxml lib to work    
+#    for comment_data in apn_trees[0].xpath("preceding-sibling::comment()"):
+#      output_root.addprevious(comment_data)
+
+    while apn_trees:
+        current_tree = apn_trees.pop()
+        for apn_current in current_tree.findall("apn"):
+            apn_query = "apn"
+            apn_query += queryAttribute(apn_current,"apn")
+            apn_query += queryAttribute(apn_current,"carrier")
+            apn_query += queryAttribute(apn_current,"mcc")
+            apn_query += queryAttribute(apn_current,"mnc")
+            if apn_query not in apn_queries:
+                for overwrite_tree in apn_trees:
+                    apn_overwrite = overwrite_tree.findall(apn_query)
+                    if apn_overwrite:
+                        apn_output = apn_overwrite[0]
+                        break
+                if not apn_overwrite:
+                    apn_output = apn_current
+                apn_output.tail = "\n  "
+                output_root.append(apn_output)
+                apn_queries.append(apn_query)
+
+    if apn_output is not None:
+        apn_output.tail = "\n"
+
+    output_tree = etree.ElementTree(output_root)
+    output_tree.write(output_file_path,encoding="UTF-8",xml_declaration=True)
+
+if __name__ == "__main__":
     main(sys.argv)
-- 
2.25.1

